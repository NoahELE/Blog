<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>NoahELE's Blog</title><link>https://noahele.github.io/Blog/</link><description>Recent content on NoahELE's Blog</description><generator>Hugo -- 0.134.1</generator><language>en</language><lastBuildDate>Wed, 14 Aug 2024 21:21:33 +1000</lastBuildDate><atom:link href="https://noahele.github.io/Blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Lambda</title><link>https://noahele.github.io/Blog/posts/java-lambda/</link><pubDate>Wed, 14 Aug 2024 21:21:33 +1000</pubDate><guid>https://noahele.github.io/Blog/posts/java-lambda/</guid><description>&lt;h2 id="javas-lambda">Java&amp;rsquo;s Lambda&lt;/h2>
&lt;p>Java&amp;rsquo;s Lambda is actually a syntax sugar for anonymous implementation for functional interfaces. For example, the 2 are equivalent:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Runnable f1 &lt;span style="color:#f92672">=&lt;/span> () &lt;span style="color:#f92672">-&amp;gt;&lt;/span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lambda&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Runnable f2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Runnable() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lambda&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>Annoying Stuff in Go</title><link>https://noahele.github.io/Blog/posts/annoying-stuff-in-go/</link><pubDate>Fri, 03 Nov 2023 15:30:12 +1100</pubDate><guid>https://noahele.github.io/Blog/posts/annoying-stuff-in-go/</guid><description>&lt;p>In this blog I want to complain about some annoying stuff in Go. I&amp;rsquo;m not saying that Go is bad, in fact I love Go for its simplicity and ease of use. It&amp;rsquo;s just that there are some designs in Go that ruin the experience for me.&lt;/p>
&lt;h3 id="ugly-error-handling">Ugly Error Handling&lt;/h3>
&lt;p>I&amp;rsquo;ll put a disclaimer here that I&amp;rsquo;m not a fan of exceptions either. I think exceptions are a bad idea in general. But I think Go&amp;rsquo;s error handling is even worse. Go&amp;rsquo;s error handling actually encourage those who are lazy and punish those who want to write good code.&lt;/p></description></item><item><title>Thoughts on Pipe Operator</title><link>https://noahele.github.io/Blog/posts/thoughts-on-pipe-operator/</link><pubDate>Mon, 18 Sep 2023 18:47:30 +1000</pubDate><guid>https://noahele.github.io/Blog/posts/thoughts-on-pipe-operator/</guid><description>&lt;p>Recently I&amp;rsquo;ve been playing with Elixir and found a interesting operator called Pipe, which is &lt;code>|&amp;gt;&lt;/code>. Elixir makes use of it to pipe a function&amp;rsquo;s output to another function. It helps to write clean code like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>upcase() &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>) &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>reverse() &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># instead of&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(&lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>reverse(&lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>upcase(&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)), &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>Javascript Related</title><link>https://noahele.github.io/Blog/posts/javascript-related/</link><pubDate>Sun, 23 Jul 2023 21:26:16 +1000</pubDate><guid>https://noahele.github.io/Blog/posts/javascript-related/</guid><description/></item><item><title>Java Related</title><link>https://noahele.github.io/Blog/posts/java-related/</link><pubDate>Sun, 23 Jul 2023 21:21:15 +1000</pubDate><guid>https://noahele.github.io/Blog/posts/java-related/</guid><description>&lt;h2 id="java">Java&lt;/h2>
&lt;ul>
&lt;li>The reason why &lt;code>record&lt;/code> classes have accessor methods instead of public final attributes:
&lt;ul>
&lt;li>make it possible to override accessor methods&lt;/li>
&lt;li>allow the &lt;code>record&lt;/code> class to implement interfaces&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lombok">Lombok&lt;/h2>
&lt;ul>
&lt;li>&lt;code>@Data&lt;/code> generates constructor only if there is no explicitly written constructor&lt;/li>
&lt;li>&lt;code>@Data&lt;/code> should not be used on Hibernate entities, as the generated &lt;code>equals&lt;/code> and &lt;code>hashCode&lt;/code> methods will cause problems when the entity is detached from the session.&lt;/li>
&lt;/ul>
&lt;h2 id="spring">Spring&lt;/h2>
&lt;ul>
&lt;li>&lt;code>@Autowired&lt;/code> can be used on constructor, setter and field. Constructor injection is recommended.
&lt;ul>
&lt;li>My preference is constructor injection &amp;gt; setter injection &amp;gt; field injection. And then utilize &lt;code>@RequiredArgsConstructor&lt;/code> lombok annotation to generate constructor with required fields. By marking all required beans &lt;code>private final&lt;/code>, it is automatically present in the constructor generated and thus injected. I think this is a more elegant way of injecting dependencies.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Circular references is discouraged and they are prohibited by default. Possible Solutions:
&lt;ul>
&lt;li>Modify the code base to remove circular references&lt;/li>
&lt;li>Add &lt;code>@Lazy&lt;/code> annotation to constructor, so that the bean is not created until it is needed&lt;/li>
&lt;li>Use setter injection instead of constructor injection&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Graph Search Algorithms</title><link>https://noahele.github.io/Blog/posts/graph-search-algorithms/</link><pubDate>Thu, 15 Dec 2022 15:23:19 +0800</pubDate><guid>https://noahele.github.io/Blog/posts/graph-search-algorithms/</guid><description>&lt;p>Revise about many graph-searching related algorithms.&lt;/p>
&lt;h2 id="dfs-depth-first-search">DFS: Depth First Search&lt;/h2>
&lt;p>Search till the leaf vertex then choose another path.&lt;/p>
&lt;p>It will find a path between two vertices and it&amp;rsquo;s &lt;em>guaranteed&lt;/em> to do so, however it is &lt;em>not guaranteed&lt;/em> to find the shortest path.&lt;/p>
&lt;p>works on graphs that are:&lt;/p>
&lt;ol>
&lt;li>connected&lt;/li>
&lt;li>unweighted&lt;/li>
&lt;li>directed&lt;/li>
&lt;/ol>
&lt;p>Uses a stack data structure to traverse all nodes in a graph.&lt;/p></description></item></channel></rss>