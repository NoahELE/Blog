<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>NoahELE's Blog</title><link>https://noahele.github.io/Blog/</link><description>Recent content on NoahELE's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 16 Dec 2022 18:18:19 +0800</lastBuildDate><atom:link href="https://noahele.github.io/Blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Miscellaneous</title><link>https://noahele.github.io/Blog/posts/miscellaneous/</link><pubDate>Fri, 16 Dec 2022 18:18:19 +0800</pubDate><guid>https://noahele.github.io/Blog/posts/miscellaneous/</guid><description>Java The reason of record class has accessors instead of public final attributes: make it possible to override accessor methods allow the record class to implement interfaces Lombok @Data generates constructor only if there is no explicitly written constructor Spring Relying upon circular references is discouraged and they are prohibited by default. Possible Solutions: Modify the code base to remove circular references Add @Lazy annotation to constructor</description></item><item><title>Graph Search Algorithms</title><link>https://noahele.github.io/Blog/posts/graph-search-algorithms/</link><pubDate>Thu, 15 Dec 2022 15:23:19 +0800</pubDate><guid>https://noahele.github.io/Blog/posts/graph-search-algorithms/</guid><description>Revise about many graph-searching related algorithms.
DFS: Depth First Search Search till the leaf vertex then choose another path.
It will find a path between two vertices and it&amp;rsquo;s guaranteed to do so, however it is not guaranteed to find the shortest path.
works on graphs that are:
connected unweighted directed Uses a stack data structure to traverse all nodes in a graph.
Steps of the algorithm:
push the root vertex to the stack while the vertex is not empty pop a vertex out of the stack if the vertex is: the destination, then end search marked visited, then continue unvisited: mark it as visited add its unvisited neighbors to the stack BFS: Breadth First Search Search all neighbors of a vertex then move on next level.</description></item></channel></rss>