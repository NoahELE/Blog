<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on NoahELE's Blog</title><link>https://noahele.github.io/Blog/posts/</link><description>Recent content in Posts on NoahELE's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 03 Nov 2023 15:30:12 +1100</lastBuildDate><atom:link href="https://noahele.github.io/Blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Annoying Stuff in Go</title><link>https://noahele.github.io/Blog/posts/annoying-stuff-in-go/</link><pubDate>Fri, 03 Nov 2023 15:30:12 +1100</pubDate><guid>https://noahele.github.io/Blog/posts/annoying-stuff-in-go/</guid><description>In this blog I want to complain about some annoying stuff in Go. I&amp;rsquo;m not saying that Go is bad, in fact I love Go for its simplicity and ease of use. It&amp;rsquo;s just that there are some designs in Go that ruin the experience for me.
Ugly Error Handling I&amp;rsquo;ll put a disclaimer here that I&amp;rsquo;m not a fan of exceptions either. I think exceptions are a bad idea in general.</description></item><item><title>Thoughts on Pipe Operator</title><link>https://noahele.github.io/Blog/posts/thoughts-on-pipe-operator/</link><pubDate>Mon, 18 Sep 2023 18:47:30 +1000</pubDate><guid>https://noahele.github.io/Blog/posts/thoughts-on-pipe-operator/</guid><description>Recently I&amp;rsquo;ve been playing with Elixir and found a interesting operator called Pipe, which is |&amp;gt;. Elixir makes use of it to pipe a function&amp;rsquo;s output to another function. It helps to write clean code like this:
&amp;#34;hello world&amp;#34; |&amp;gt; String.upcase() |&amp;gt; String.split(&amp;#34; &amp;#34;) |&amp;gt; Enum.reverse() |&amp;gt; Enum.join(&amp;#34; &amp;#34;) # instead of Enum.join(Enum.reverse(String.split(String.upcase(&amp;#34;hello world&amp;#34;), &amp;#34; &amp;#34;)), &amp;#34; &amp;#34;) But then I found that pipeline operator is not so common in other languages I know like Java, JavaScript and Python.</description></item><item><title>Javascript Related</title><link>https://noahele.github.io/Blog/posts/javascript-related/</link><pubDate>Sun, 23 Jul 2023 21:26:16 +1000</pubDate><guid>https://noahele.github.io/Blog/posts/javascript-related/</guid><description/></item><item><title>Java Related</title><link>https://noahele.github.io/Blog/posts/java-related/</link><pubDate>Sun, 23 Jul 2023 21:21:15 +1000</pubDate><guid>https://noahele.github.io/Blog/posts/java-related/</guid><description>Java The reason why record classes have accessor methods instead of public final attributes: make it possible to override accessor methods allow the record class to implement interfaces Lombok @Data generates constructor only if there is no explicitly written constructor @Data should not be used on Hibernate entities, as the generated equals and hashCode methods will cause problems when the entity is detached from the session. Spring @Autowired can be used on constructor, setter and field.</description></item><item><title>Graph Search Algorithms</title><link>https://noahele.github.io/Blog/posts/graph-search-algorithms/</link><pubDate>Thu, 15 Dec 2022 15:23:19 +0800</pubDate><guid>https://noahele.github.io/Blog/posts/graph-search-algorithms/</guid><description>Revise about many graph-searching related algorithms.
DFS: Depth First Search Search till the leaf vertex then choose another path.
It will find a path between two vertices and it&amp;rsquo;s guaranteed to do so, however it is not guaranteed to find the shortest path.
works on graphs that are:
connected unweighted directed Uses a stack data structure to traverse all nodes in a graph.
Steps of the algorithm:
push the root vertex to the stack while the vertex is not empty pop a vertex out of the stack if the vertex is: the destination, then end search marked visited, then continue unvisited: mark it as visited add its unvisited neighbors to the stack BFS: Breadth First Search Search all neighbors of a vertex then move on next level.</description></item></channel></rss>